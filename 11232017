https://www.hackerrank.com/domains/algorithms/strings

Strings:
=======================================================
----SUPER REDUCED STRING---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static String super_reduced_string(String str){        
       for (int i = 1; i < str.length(); i++) { 
        if (str.charAt(i) == str.charAt(i - 1)) { 
            str = str.substring(0, i - 1) + str.substring(i + 1); 
            i = 0;
        }
    }
        
    if (str.length() == 0) {
        return "Empty String";
    } 
        
    return str;
        
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        String result = super_reduced_string(s);
        System.out.println(result);
    }
}

====================================================
---CAMEL CASE--

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        
        char[] ch = s.toCharArray();
        int count = 1;
        for(int i = 0;i<ch.length;i++ ){
            if(Character.isUpperCase(ch[i])){
                count+=1;
            }
        }
        System.out.println(count);
    }
}
========================================================================
---PANGRAMS---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String args[] ) throws Exception {
        Scanner in = new Scanner(System.in);        
        String s = in.next();
        
        if(isPangram(s)){
            System.out.println("pangram");
        }else{
            System.out.println("not pangram");
        }
        
    }
    
    public static boolean isPangram(String s){
        s = s.toLowerCase();
        int count = 0;
        for (char c = 'a'; c <= 'z'; c++) {
            if (!s.contains(String.valueOf(c))) {
                return false;
            }
            count++;
        }
        return count == 26;
    }
}
==========================================================================
---GEM STONES---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int gemstones(String[] arr){
        String s = arr[0];
	     
	        StringBuffer sb = new StringBuffer(s);
	       char[] ch = new char[s.length()];
	       char[] chr = new char[s.length()];
	       int k = 0;
	       
	       for(int i=0;i<sb.length();i++) {
	    	   int count = 0;
	           for(int j=1;j<arr.length;j++){               
	               if(arr[j].indexOf(s.charAt(i))>=0)
	            	   count++;	               
	           }
	           if(count == arr.length-1){	        	   
	        	 if(String.valueOf(chr).trim().indexOf(s.charAt(i))<0){
	        		  chr[k] =  s.charAt(i);
	        		  k++;
	        	  }
	           }
	           
	       }
	     
	       return String.valueOf(chr).trim().length();
	    }
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] arr = new String[n];
        for(int arr_i = 0; arr_i < n; arr_i++){
            arr[arr_i] = in.next();
        }
        int result = gemstones(arr);
        System.out.println(result);
    }
}
====================================================================
---ALTERNATING CHARECTERS---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int alternatingCharacters(String s){
        int count = 0;
        StringBuffer sb = new StringBuffer(s);
        	for(int i=1;i<sb.length();i++){
        	if(sb.charAt(i)==sb.charAt(i-1)){
                sb.deleteCharAt(i);
                count++;
                i=0;
            }       
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            String s = in.next();
            int result = alternatingCharacters(s);
            System.out.println(result);
        }
    }
}
========================================================
---BEAUTIFUL BINARY STRING------

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int minSteps(int n, String B){
    Pattern p = Pattern.compile("010");
	Matcher m = p.matcher(B);
	int count = 0;
	while (m.find()){
	    count +=1;
	}
	//System.out.println(count);
	return count;
        
    } 
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String B = in.next();
        int result = minSteps(n, B);
        System.out.println(result);
    }
}
===================================================
----PALEMDROME INDEX---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int palindromeIndex(String s){     	      
          int i = 0;
	       if(isPalindrome(s)){
	           return -1;
	       }else{	    	   
	           for(i=0 ; i<s.length();i++) {
	        	   StringBuilder sb = new StringBuilder(s);
	              if(isPalindrome(sb.deleteCharAt(i).toString())){	                  
                      break;
	              }
	          }
	       }
	        return s.indexOf(s.charAt(i));
    }
    
    private static boolean isPalindrome(String sb){
	        StringBuilder s = new StringBuilder();	       
	        for(int i= sb.length()-1;i>=0;i--){
	            s = s.append(sb.charAt(i));
	        }        	        
	        return s.toString().equals(sb);
	    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            String s = in.next();
            int result = palindromeIndex(s);
            System.out.println(result);
        }
    }
}
==========================================================
---ANAGRAM---
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int anagaram(String s){
        if(s.length()%2!=0){
			return -1;
		}
		
		String s1 = s.substring(0, s.length()/2);
		String s2 = s.substring(s.length()/2, s.length());
		int count = 0;				
		for(int i=0;i<s1.length();i++){
			if(s2.indexOf(s1.charAt(i))<0){
				count++;
			}
		}
		return count;
	}
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            String s = in.next();
            int result = anagaram(s);
            System.out.println(result);
        }
    }
}
-- NEW ASSIGNMENT
==============================================================
--MAX-SUB-ARRAY-SUM-----

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static long maximumSum(long[] a, long m) {
        
        long max = 0l;
        
        for(int i=0;i<a.length;i++){
            long sum = 0;    
            for(int j=i;j<a.length;j++){
                for(int k=i;k<=j;k++){                    
                 sum+=a[k];
                }  
                if(m>0){
                if(sum%m > max){
                    max = sum%m;
                }
                }
            }
        }
        
        return max;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            int n = in.nextInt();
            long m = in.nextLong();
            long[] a = new long[n];
            for(int a_i = 0; a_i < n; a_i++){
                a[a_i] = in.nextLong();
            }
            long result = maximumSum(a, m);
            System.out.println(result);
        }
        in.close();
    }
}
=================================================================
---PAIRS---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    static int pairs(int[] a,int k) {
     
        int count = 0;
        for(int i = 0; i< a.length; i++){
            for(int j=i;j<a.length;j++)
            if(Math.abs(a[i]-a[j]) == k){
                count ++;
            }
        }        
        return count;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int res;
        
        String n = in.nextLine();
        String[] n_split = n.split(" ");
        
        int _a_size = Integer.parseInt(n_split[0]);
        int _k = Integer.parseInt(n_split[1]);
        
        int[] _a = new int[_a_size];
        int _a_item;
        String next = in.nextLine();
        String[] next_split = next.split(" ");
        
        for(int _a_i = 0; _a_i < _a_size; _a_i++) {
            _a_item = Integer.parseInt(next_split[_a_i]);
            _a[_a_i] = _a_item;
        }
        
        res = pairs(_a,_k);
        System.out.println(res);
    }
}
==================================================================================
--MISSING-NUMBERS--

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


public class Solution {
    
    public static int[] findMissing(int[] a, int n,int[] b, int m){
        
        int[] missing = new int[m]; 
        int [] result = new int[m-n]; 
        
        if(n-m!=0 ){        
        
        HashMap<Integer, Integer> mapA = new HashMap<Integer, Integer>();
        HashMap<Integer, Integer> mapB = new HashMap<Integer, Integer>();
            
        for (int i : a) {            
            if(mapA.containsKey(i))
            {    
                mapA.put(i, mapA.get(i)+1);
            }
            else
            {    
                mapA.put(i, 1);
            }
        }
        //    System.out.println(mapA);
        
        for (int i : b) {            
            if(mapB.containsKey(i))
            {    
                mapB.put(i, mapB.get(i)+1);
            }
            else
            {    
                mapB.put(i, 1);
            }
        }
         //   System.out.println(mapB);
        
        
        int i = 0;         
         for (Integer key: mapB.keySet()){
                if (!mapB.get(key).equals(mapA.get(key))){
                    missing[i] = key;
                    i++;
                }
         } 
        
        int s = 0;
        for(int k : missing){
            if(k>0){
                result[s] = k;
                s++;
           }
            
        }
        Arrays.sort(result);
        
        }
        
        
        return result;
        
    }
        

    public static void main(String[] args) {
         
        
        Scanner s = new Scanner(System.in);        
       int n = s.nextInt();
        int a[] = new int[n];        
        for(int i = 0; i < n; i++)
        {
            a[i] = s.nextInt();
        }
        
       int m = s.nextInt();
        int b[] = new int[m];        
        for(int i = 0; i < m; i++)
        {
            b[i] = s.nextInt();
        }        
         
        int [] result = new int[Math.abs(b.length-a.length)];
        
        result = findMissing(a,n,b,m);
        for(int i: result)    {
            System.out.print(i+" ");
        }
        
        
        
    }
}
===================================================================
---BIG-SORTING---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] unsorted = new String[n];
        for(int unsorted_i=0; unsorted_i < n; unsorted_i++){
            unsorted[unsorted_i] = in.next();
        }
        
        
        
        BigInteger[] arr = new BigInteger[unsorted.length];
        
        for(int i=0;i<unsorted.length;i++){
            arr[i] = new BigInteger(unsorted[i]);
        }
        
        Arrays.sort(arr);
        
        for(BigInteger k:arr){
            System.out.println(k);    
        }
        
        
        
        
    }
}
=======================================================================
---INTRO TO TUTORIAL CHALLENGES---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);        
        int num = in.nextInt();
        int arrSize = in.nextInt();      
        Integer[] a = new Integer[arrSize];
        for(int i=0;i<arrSize;i++){
            a[i]=new Integer(in.nextInt());
        }
        
        System.out.println(Arrays.asList(a).indexOf(num));
    }
}
===============================================================
--SUM-VS-XOR

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static long solve(long n) {
        long count = 0;
        for(long i = 0; i<=n;i++){            
            if((n+i) == (n^i)){
                count ++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long n = in.nextLong();
        long result = solve(n);
        System.out.println(result);
    }
}
=========================================================================
---CLOSEST-NUMBER---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static void printPairs(int[] a, int k){
        
        int min = Math.abs(a[0]-a[1]);
        
        for(int i =0;i<k;i++){
            for(int j=i+1;j<k;j++){
                if(Math.abs(a[i]-a[j]) < min){
                    min = Math.abs(a[i]-a[j]);
                }
            }
        }
        int[] b = new int[k*2] ;
        int n = 0;
        for(int i =0;i<k;i++){
            for(int j=i+1;j<k;j++){
                if(Math.abs(a[i]-a[j]) == min){
                    b[n] = a[i];
                    b[++n] = a[j];
                    n++;
                }
            }
        }
        Arrays.sort(b);
        for(int i : b){
            if(i!=0){
            System.out.print(i+" ");
            }
        }
        
        
        
    }

    public static void main(String[] args) {
       Scanner in = new Scanner(System.in);
       int size = in.nextInt();
       int[] a = new int[size]; 
        
       for(int i=0;i<size;i++) {
           a[i] = in.nextInt();
       }
        
       printPairs(a, size);
        
    }
}
======================================================================
