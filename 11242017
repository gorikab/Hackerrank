--------------------------------------------
--Recursive Digit Sum--

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int superDigit(String n, int k) {
        
        StringBuffer sb = new StringBuffer();              
        
        for(int i=0;i<k;i++){            
            sb = sb.append(n);
        }        
        int result = findSum(sb.toString());        
        return result;
        
    }
    
     static int findSum(String s){         
         int sum = 0;         
         for(int i=0;i<s.length();i++){          
             sum+= (s.charAt(i)-48);              
         }         
         if(sum>9){
             sum = findSum(String.valueOf(sum));
         }else{
             return sum;
         }
         return sum;
     }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String n = in.next();
        int k = in.nextInt();
        int result = superDigit(n, k);
        System.out.println(result);
        in.close();
    }
}
=========================================================================================
---Lonely Integer---


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int lonelyinteger(int[] a) {
        int result = 0;
        List<Integer> list = new ArrayList<Integer>();        
        for(int i : a){
            list.add(new Integer(i));
        }
        
        for(Integer i : list){
            if(list.indexOf(i) == list.lastIndexOf(i)){
               result = i;
                break;
            }
                
        }
        return result;
                
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for(int a_i = 0; a_i < n; a_i++){
            a[a_i] = in.nextInt();
        }
        int result = lonelyinteger(a);
        System.out.println(result);
    }
}
==============================================================

---flipping-bits---

 import java.io.*;  
 import java.util.*;  
 import java.text.*;  
 import java.math.*;  
 import java.util.regex.*;  
 public class Solution {  
   
       
     static void printResult(Long x)  {       
       String s1="";
       String s2="";  
       String s = Long.toBinaryString(x);  
         
       for(int i = 0, j = s.length()-1; i<32; i++){  
         if(j>=0 && s.charAt(j) =='1'){  
           s1 = s1 + "0";  
         }else{  
           s1 = s1 + "1";  
         }             
           j--;  
           
       }  
       
       for(int i = 31;i>=0;i--){  
         s2 = s2+s1.charAt(i);  
       }  
     String bin = s2;  
     long number = 0;  
     int dig;  
     for (int i = 0; i < bin.length(); i++){  
       dig = bin.charAt(i) - '0';  
       number = 2 * number + dig;  
     }  
       System.out.println( Long.toString(number));  
     }
     
     public static void main(String[] args) {       
     Scanner sc = new Scanner(System.in);  
     
     int t = sc.nextInt();  
     while((t--)>0){  
       Long x = sc.nextLong();  
       
       printResult(x);
        
     }
   }
   }  
 =====================================================
--Password Cracker--

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static void printPassword(String[] a, String pass){
    StringBuffer sb = new StringBuffer(); 
    int f=0;
       if(a.length <=10 ) {
        for(int i=0;i<a.length;i++) {            
            if(pass=="" || pass==" "  ||pass.length()==0 )
            {       
                f=1;
                break;
            }            
            if(pass.startsWith(a[i]))
            {    
                sb = sb.append(a[i]).append(" ");
                pass=pass.substring(a[i].length());             
                i=-1;
            }        
        }
       }
        if(f==0){
               System.out.println("WRONG PASSWORD");
        }else{
            System.out.print(sb);            
             System.out.println();
         }
  }        

    public static void main(String[] args) {
       Scanner in = new Scanner(System.in);
       int t = in.nextInt();
       if(t<=10) {
           for(int i=0;i<t;i++){
               int n = in.nextInt();
               if(n<=10){
                    String[] strArr = new String[n];
                    for(int j=0;j<n;j++){
                        strArr[j] = in.next();              
                    }
                   String pwd = in.next();           
               printPassword(strArr, pwd);   
               }
         }
    }
    }
}
===================================================
---Fibonacci Modified---
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        Scanner in = new Scanner(System.in);
         BigInteger t1 = in.nextBigInteger();
        BigInteger t2 = in.nextBigInteger();
        int n  = in.nextInt();
        
        BigInteger[] a = new BigInteger[n];        
        a[0] = t1;
        a[1] = t2;
      //  System.out.print(a[0]+" "+a[1]+" ");
        for(int i = 2 ; i<n; i++){
            a[i] = a[i-2].add(a[i-1].multiply(a[i-1]));
        //    System.out.print(a[i]+" ");
        }
        
        System.out.println(a[n-1]);
        
        
    }
}
=============================================================
---sam-and-substrings---
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    static void printOutput(String s){
     
     int sum=0;
        
     for( int i = 0 ; i < s.length() ; i++ )
     {
        for( int j = 1 ; j <= s.length() - i ; j++ )
         {
          //  System.out.print("-->"+Integer.valueOf(s.substring(i, i+j)));
            sum+= Integer.valueOf(s.substring(i, i+j));           
         }
      }
        System.out.println(sum);
        
    }
    
    public static void main(String args[] ) throws Exception {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        Scanner in = new Scanner(System.in);
        String s = in.next();
        printOutput(s);
    }
}
==================================================================
-----Equal-Stacks---

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n1 = in.nextInt();
        int n2 = in.nextInt();
        int n3 = in.nextInt();
        Queue<Integer> s1 = new LinkedList<Integer>();
        Queue<Integer> s2 = new LinkedList<Integer>();
        Queue<Integer> s3 = new LinkedList<Integer>();
        
        int h1 = 0; 
        int h2 = 0; 
        int h3 = 0; 
        
        int minStack; 
        
        //Initialize the stacks and their heights
        for(int i = 0; i < n1; i++){
            int cylinder = in.nextInt();
            s1.add(cylinder);
            h1 += cylinder;
        }
        
        for(int i = 0; i < n2; i++){
            int cylinder = in.nextInt();
            s2.add(cylinder);
            h2 += cylinder;
        }
        
        for(int i = 0; i < n3; i++){
            int cylinder = in.nextInt();
            s3.add(cylinder);
            h3 += cylinder;
        }
        minStack = Math.min(h1,Math.min(h2,h3));
        
        while(h1 != h2 || h1 != h3)
        {
            
            while(h1 > minStack)
            {
                h1 -= s1.remove();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); 
            
            
            while(h2 > minStack)
            {
                h2 -= s2.remove();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); 
            
            
            while(h3 > minStack)
            {
                h3 -= s3.remove();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); 
        }
        System.out.println(minStack);
    }
}
=======================================================================

