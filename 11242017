--------------------------------------------
--Recursive Digit Sum--

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int superDigit(String n, int k) {
        
        StringBuffer sb = new StringBuffer();              
        
        for(int i=0;i<k;i++){            
            sb = sb.append(n);
        }        
        int result = findSum(sb.toString());        
        return result;
        
    }
    
     static int findSum(String s){         
         int sum = 0;         
         for(int i=0;i<s.length();i++){          
             sum+= (s.charAt(i)-48);              
         }         
         if(sum>9){
             sum = findSum(String.valueOf(sum));
         }else{
             return sum;
         }
         return sum;
     }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String n = in.next();
        int k = in.nextInt();
        int result = superDigit(n, k);
        System.out.println(result);
        in.close();
    }
}
=========================================================================================
---Lonely Integer---


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int lonelyinteger(int[] a) {
        int result = 0;
        List<Integer> list = new ArrayList<Integer>();        
        for(int i : a){
            list.add(new Integer(i));
        }
        
        for(Integer i : list){
            if(list.indexOf(i) == list.lastIndexOf(i)){
               result = i;
                break;
            }
                
        }
        return result;
                
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for(int a_i = 0; a_i < n; a_i++){
            a[a_i] = in.nextInt();
        }
        int result = lonelyinteger(a);
        System.out.println(result);
    }
}
==============================================================

---flipping-bits---

 import java.io.*;  
 import java.util.*;  
 import java.text.*;  
 import java.math.*;  
 import java.util.regex.*;  
 public class Solution {  
   
       
     static void printResult(Long x)  {       
       String s1="";
       String s2="";  
       String s = Long.toBinaryString(x);  
         
       for(int i = 0, j = s.length()-1; i<32; i++){  
         if(j>=0 && s.charAt(j) =='1'){  
           s1 = s1 + "0";  
         }else{  
           s1 = s1 + "1";  
         }             
           j--;  
           
       }  
       
       for(int i = 31;i>=0;i--){  
         s2 = s2+s1.charAt(i);  
       }  
     String bin = s2;  
     long number = 0;  
     int dig;  
     for (int i = 0; i < bin.length(); i++){  
       dig = bin.charAt(i) - '0';  
       number = 2 * number + dig;  
     }  
       System.out.println( Long.toString(number));  
     }
     
     public static void main(String[] args) {       
     Scanner sc = new Scanner(System.in);  
     
     int t = sc.nextInt();  
     while((t--)>0){  
       Long x = sc.nextLong();  
       
       printResult(x);
        
     }
   }
   }  
 =====================================================
--Password Cracker--

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static void printPassword(String[] strArr, String pwd){
        
        StringBuffer sb = new StringBuffer();
        StringBuffer sbr = new StringBuffer();
      
        int index = 0;                   
        int count = 0; 
        boolean flag = false;
        boolean found = false;
            while(pwd.substring(index).length()>0){                      
                for (int i = 0;i<strArr.length;i++){
                 if(pwd.substring(index).startsWith(strArr[i])){
                     sb = sb.append(strArr[i]).append(" ");                                     
                     sbr = sbr.append(strArr[i]);                                     
                     index += strArr[i].length();                                 
                    count++;
                 }                   
                if(!pwd.contains(strArr[i])){                  
                  flag = true;  
                }    
            }
             if(flag)   {
                 break;
             }
             
            /* for(int i = 0; i<pwd.length();i++){
                for (int k = 0;k<strArr.length;k++){
                 if(Arrays.binarySearch(strArr[k].toCharArray() ,pwd.charAt(i))<0){                     
                     
                    found = true; 
                 }
             } 
             }
                if(found){
                    break;
                }*/
               
             
            }
      
       
        if(sbr.toString().equals(pwd)){
            System.out.println(sb);    
        }
        else {
             //System.out.println(sb);
            System.out.println("WRONG PASSWORD");
        }
        
        
    }

    public static void main(String[] args) {
       Scanner in = new Scanner(System.in);
       int k = in.nextInt();
       for(int i=0;i<k;i++){           
           int size = in.nextInt();
           String[] strArr = new String[size];
           
           for(int j=0;j<size;j++){
               strArr[j] = in.next();              
           }           
           String pwd = in.next();           
           printPassword(strArr, pwd);
       }
        
    }
}
======================================
